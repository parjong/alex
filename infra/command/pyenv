#!/bin/bash

# pyenv - Manage Alex-wide Python Virtual Environments
#
# alex pyenv install [NAME]
# alex pyenv uninstall [NAME]
#
# alex pyenv update [NAME]
#
# [TBD] alex pyenv list-all
# [TBD] alex pyenv list-installed
#
# alex pyenv show-bin-dir

function alex_pyenv_configure()
{
  local NAME="$1"

  export ALEX_PYENV_REQ="${ALEX_PROJECT_PATH}/infra/pyenv/${NAME}/requirements.txt"
  export ALEX_PYENV_DIR="${ALEX_PROJECT_PATH}/infra/.pyenv/${NAME}"
  export ALEX_PYENV_STAMP="${ALEX_PROJECT_PATH}/infra/.pyenv/${NAME}.stamp"
}

function alex_pyenv_install()
{
  if [[ -f "${ALEX_PYENV_STAMP}" ]]; then
    return
  fi

  rm -rf "${ALEX_PYENV_DIR}"

  # Create "virtual environment" and install "packages"
  command virtualenv -p python3 "${ALEX_PYENV_DIR}"
  command "${ALEX_PYENV_DIR}/bin/pip" install -r "${ALEX_PYENV_REQ}"

  # Create the stamp
  touch "${ALEX_PYENV_STAMP}"
}

function alex_pyenv_uninstall()
{
  rm -f "${ALEX_PYENV_STAMP}"
}

function alex_pyenv_update()
{
  if [[ -f "${ALEX_PYENV_STAMP}" ]]; then
    if [[ "${ALEX_PYENV_STAMP}" -nt "${ALEX_PYENV_REQ}" ]]; then
      # Skip update if the stamp file exists and is newer than the requirements file
      return
    fi
  fi

  # Keep silent!
  # TODO introduce 'verbose' or 'silent' option
  command "${ALEX_PYENV_DIR}/bin/pip" install -qqq -r "${ALEX_PYENV_REQ}"

  # Update stamp
  touch "${ALEX_PYENV_STAMP}"
}

# Create a local directory
mkdir -p "${ALEX_PROJECT_PATH}/infra/.pyenv"

COMMAND="$1"; shift

case "${COMMAND}" in
  "install")
    alex_pyenv_configure "$1"
    alex_pyenv_install
    ;;
  "uninstall")
    alex_pyenv_configure "$1"
    alex_pyenv_uninstall
    ;;
  "update")
    alex_pyenv_configure "$1"
    alex_pyenv_update
    ;;
  "show-bin-dir")
    alex_pyenv_configure "$1"
    if [[ -f "${ALEX_PYENV_STAMP}" ]]; then
      echo "${ALEX_PYENV_DIR}/bin"
    fi
    ;;
  *)
    echo "ERROR: Unknown command '${COMMAND}'"
    exit 255
    ;;
esac
